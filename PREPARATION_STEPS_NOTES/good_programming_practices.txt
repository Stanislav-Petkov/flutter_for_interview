Content:

56. Good programming practices - kiss, dry, yagni, composition over inheritance,
57. Good programming practices - Law of demeter(Principle of Least Knowledge), DESIGN patterns,
tda - tell don't ask




56. https://pub.dev/packages/provider56. Good programming practices - kiss, dry, yagni, composition over inheritance
57. Good programming practices - Law of demeter(Principle of Least Knowledge), DESIGN patterns,
tda - tell don't ask

57. Good programming practices - Law of demeter(Principle of Least Knowledge),DESIGN patterns

DESIGN patterns
https://medium.com/@hamber/flutter-dart-solid-principles-and-top-design-patterns-3dd573371dcb#:~:text=The%20Law%20of%20Demeter%20is,%2C%20essentially%20its%20%E2%80%9Cfriends%E2%80%9D.

57.1. The Law of Demeter is a guideline that recommends objects to have limited knowledge of other objects.

Each unit (or object) should be aware only of units that are closely related to itself, 
essentially its ‚Äúfriends‚Äù.
Direct interaction should be confined to these friends, avoiding any communication 
with ‚Äústrangers‚Äù or distant units.
For instance, with three classes A, B, and C: If A can communicate with B, and B with C,
A should not directly communicate with C even though there‚Äôs an indirect connection. 
B is A‚Äôs friend, while C is a stranger to A.
This approach encourages a design where an object knows or assumes as little as 
possible about other objects, focusing mainly on its immediate neighbors.
The Law of Demeter is also referred to as the Principle of Least Knowledge.


57.2. Tell don't ask:
https://medium.com/@shiiyan/understanding-the-tda-telldontask-principle-44acbc28bacb
 Tell, Don‚Äôt Ask
What does it mean?
Instead of retrieving data from an object and processing it externally,
 tell the object what to do.

‚ùå Bad Example (violating the principle)
class Account {
  double balance = 100;

  double getBalance() => balance; // Asking for data
}

class Bank {
  void withdraw(Account account, double amount) {
    if (account.getBalance() >= amount) { // üëé External logic
      print("Withdrawing $amount...");
    }
  }
}
üî¥ Problem: The Bank class is making decisions based on Account data 
instead of letting Account handle it.

‚úÖ Good Example (following the principle)

class Account {
  double balance = 100;

  bool withdraw(double amount) {
    if (balance >= amount) {
      balance -= amount;
      print("Withdrawing $amount...");
      return true;
    }
    return false;
  }
}

class Bank {
  void processWithdrawal(Account account, double amount) {
    account.withdraw(amount); // üëç Telling the object to act
  }
}
‚úÖ Benefits:

Encapsulation is stronger (Account manages its own data).
Code is more modular and easier to maintain.

57.3. Command-Query Separation (CQS)
What does it mean?
A method should either perform an action (Command) or return a value (Query)‚Äîbut not both.

‚ùå Bad Example (violating CQS)
class Account {
  double balance = 100;

  double withdraw(double amount) { // üëé Does both: modifies and returns data
    if (balance >= amount) {
      balance -= amount;
    }
    return balance;
  }
}
üî¥ Problem: The method both modifies state and returns data, 
which can lead to unexpected behavior.

‚úÖ Good Example (following CQS)
class Account {
  double balance = 100;

  void withdraw(double amount) { // üëç Command (modifies state)
    if (balance >= amount) {
      balance -= amount;
    }
  }

  double getBalance() => balance; // üëç Query (only retrieves data)
}
‚úÖ Benefits:

Clear separation between actions and queries.
Predictability: Methods that modify state don‚Äôt return values, reducing side effects.


------------------------------------------------------------------------

56. Good programming practices - kiss, dry, yagni, composition over inheritance,

56.1- KISS (Keep It Simple, Stupid)
–ö–æ–¥—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –±—ä–¥–µ –ø—Ä–æ—Å—Ç –∏ –ª–µ—Å–µ–Ω –∑–∞ —Ä–∞–∑–±–∏—Ä–∞–Ω–µ.

‚ùå –õ–æ—à –ø—Ä–∏–º–µ—Ä (–Ω–µ–Ω—É–∂–Ω–æ —Å–ª–æ–∂–µ–Ω –∫–æ–¥):

String reverseString(String input) {
  return input.split('').reversed.join();
}
‚úÖ –ü–æ-—è—Å–µ–Ω –≤–∞—Ä–∏–∞–Ω—Ç (—Ä–∞–∑–±–∏–≤–∞–Ω–µ –Ω–∞ —Å—Ç—ä–ø–∫–∏):

String reverseString(String input) {
  List<String> chars = input.split('');
  chars = chars.reversed.toList();
  return chars.join();
}
üìå –ö–æ–≥–∞—Ç–æ –∫–æ–¥—ä—Ç –µ –ø–æ-—è—Å–µ–Ω, —Ç–æ–π –µ –ø–æ-–ª–µ—Å–µ–Ω –∑–∞ –ø–æ–¥–¥—Ä—ä–∂–∫–∞!


56.2-  DRY (Don‚Äôt Repeat Yourself)
–ò–∑–±—è–≥–≤–∞–Ω–µ –Ω–∞ –¥—É–±–ª–∏—Ä–∞–Ω–µ –Ω–∞ –∫–æ–¥, –∫–∞—Ç–æ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∞—Å–ª–µ–¥—è–≤–∞–Ω–µ –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—è.

–õ–æ—à –ø—Ä–∏–º–µ—Ä (–¥—É–±–ª–∏—Ä–∞–Ω –∫–æ–¥):
class Dog {
  void makeSound() {
    print("–ë–∞—É-–±–∞—É!");
  }
}

class Cat {
  void makeSound() {
    print("–ú—è—É-–º—è—É!");
  }
}
–î–æ–±—ä—Ä –ø—Ä–∏–º–µ—Ä (–∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ –Ω–∞—Å–ª–µ–¥—è–≤–∞–Ω–µ –∏–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å):

abstract class Animal {
  void makeSound();
}

class Dog extends Animal {
  @override
  void makeSound() => print("–ë–∞—É-–±–∞—É!");
}

class Cat extends Animal {
  @override
  void makeSound() => print("–ú—è—É-–º—è—É!");
}
‚úÖ –ò–∑–±—è–≥–≤–∞–º–µ –¥—É–±–ª–∏—Ä–∞–Ω–µ—Ç–æ –∏ –ø—Ä–∞–≤–∏–º –∫–æ–¥–∞ –ø–æ-–≥—ä–≤–∫–∞–≤.


56.3- YAGNI (You Ain‚Äôt Gonna Need It)
üö´ –ù–µ –¥–æ–±–∞–≤—è–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç, –∫–æ—è—Ç–æ –Ω–µ —Ç–∏ —Ç—Ä—è–±–≤–∞ –≤ –º–æ–º–µ–Ω—Ç–∞.

‚ùå –õ–æ—à –ø—Ä–∏–º–µ—Ä: (–Ω–µ–Ω—É–∂–Ω–æ —Å–ª–æ–∂–µ–Ω –∫–ª–∞—Å)

class Vehicle {
  void move() {}
  void fly() {} // –©–µ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –ª–∏ –ª–µ—Ç–µ–Ω–µ? ü§î
}
‚úÖ –î–æ–±—ä—Ä –ø—Ä–∏–º–µ—Ä: (—Ä–∞–∑–¥–µ–ª—è–º–µ –∫–ª–∞—Å–æ–≤–µ—Ç–µ —Å–ø–æ—Ä–µ–¥ –Ω—É–∂–¥–∏—Ç–µ)

class Car {
  void move() => print("–ö–∞—Ä–∞–Ω–µ...");
}

class Airplane {
  void fly() => print("–õ–µ—Ç–µ–Ω–µ...");
}
üìå –ù–µ –¥–æ–±–∞–≤—è–π –Ω–µ–Ω—É–∂–µ–Ω –∫–æ–¥, –∫–æ–π—Ç–æ –º–æ–∂–µ –Ω–∏–∫–æ–≥–∞ –¥–∞ –Ω–µ –±—ä–¥–µ –∏–∑–ø–æ–ª–∑–≤–∞–Ω.


56.4. Composition Over Inheritance (–ö–æ–º–ø–æ–∑–∏—Ü–∏—è –≤–º–µ—Å—Ç–æ –Ω–∞—Å–ª–µ–¥—è–≤–∞–Ω–µ)
üìå –ö–æ–º–ø–æ–∑–∏—Ü–∏—è—Ç–∞ –µ –ø–æ-–≥—ä–≤–∫–∞–≤–∞ –æ—Ç –Ω–∞—Å–ª–µ–¥—è–≤–∞–Ω–µ—Ç–æ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç—è–≤–∞ –ø—Ä–æ–±–ª–µ–º–∏
 –∫–∞—Ç–æ –¥—ä–ª–±–æ–∫–∞ –π–µ—Ä–∞—Ä—Ö–∏—è –∏ —Ç—Ä—É–¥–Ω–æ —Ç–µ—Å—Ç–≤–∞–Ω–µ.

–ö–æ–º–ø–æ–∑–∏—Ü–∏—è —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ (Dependency Injection)
Dart –Ω–∞—Å—ä—Ä—á–∞–≤–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç —á—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏, –∫–æ–µ—Ç–æ —É–ª–µ—Å–Ω—è–≤–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ—Ç–æ –∏ –ø–æ–¥–º—è–Ω–∞—Ç–∞ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏.

abstract class Engine {
  void start();
  void stop();
}

// –†–∞–∑–ª–∏—á–Ω–∏ –≤–∏–¥–æ–≤–µ –¥–≤–∏–≥–∞—Ç–µ–ª–∏
class PetrolEngine implements Engine {
  @override
  void start() => print("–ë–µ–Ω–∑–∏–Ω–æ–≤ –¥–≤–∏–≥–∞—Ç–µ–ª —Å—Ç–∞—Ä—Ç–∏—Ä–∞...");

  @override
  void stop() => print("–ë–µ–Ω–∑–∏–Ω–æ–≤ –¥–≤–∏–≥–∞—Ç–µ–ª —Å–ø–∏—Ä–∞...");
}

class ElectricEngine implements Engine {
  @override
  void start() => print("–ï–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏ –¥–≤–∏–≥–∞—Ç–µ–ª —Å—Ç–∞—Ä—Ç–∏—Ä–∞...");

  @override
  void stop() => print("–ï–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏ –¥–≤–∏–≥–∞—Ç–µ–ª —Å–ø–∏—Ä–∞...");
}

// –ö–æ–ª–∞—Ç–∞ –∏–∑–ø–æ–ª–∑–≤–∞ Engine —á—Ä–µ–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏—è
class Car {
  final Engine engine;

  Car(this.engine);

  void startCar() {
    print("–ö–æ–ª–∞—Ç–∞ —Å–µ —Å—Ç–∞—Ä—Ç–∏—Ä–∞...");
    engine.start();
  }

  void stopCar() {
    print("–ö–æ–ª–∞—Ç–∞ —Å–ø–∏—Ä–∞...");
    engine.stop();
  }
}

void main() {
  var petrolCar = Car(PetrolEngine());
  var electricCar = Car(ElectricEngine());

  petrolCar.startCar();  // "–ö–æ–ª–∞—Ç–∞ —Å–µ —Å—Ç–∞—Ä—Ç–∏—Ä–∞... –ë–µ–Ω–∑–∏–Ω–æ–≤ –¥–≤–∏–≥–∞—Ç–µ–ª —Å—Ç–∞—Ä—Ç–∏—Ä–∞..."
  electricCar.startCar(); // "–ö–æ–ª–∞—Ç–∞ —Å–µ —Å—Ç–∞—Ä—Ç–∏—Ä–∞... –ï–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏ –¥–≤–∏–≥–∞—Ç–µ–ª —Å—Ç–∞—Ä—Ç–∏—Ä–∞..."
}
üîπ –ö–∞–∫–≤–æ –ø–µ—á–µ–ª–∏–º?
‚úî –ú–æ–∂–µ–º –ª–µ—Å–Ω–æ –¥–∞ —Å–º–µ–Ω–∏–º —Ä–∞–∑–ª–∏—á–Ω–∏ –≤–∏–¥–æ–≤–µ –¥–≤–∏–≥–∞—Ç–µ–ª–∏ –±–µ–∑ –ø—Ä–æ–º—è–Ω–∞ –≤ Car.
‚úî –¢–µ—Å—Ç–≤–∞–Ω–µ—Ç–æ –µ –ø–æ-–ª–µ—Å–Ω–æ ‚Äì –º–æ–∂–µ–º –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ mock Engine –∑–∞ unit —Ç–µ—Å—Ç–æ–≤–µ.
‚úî –°–ø–∞–∑–≤–∞–º–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ Dependency Inversion (SOLID).

üìå –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
‚úÖ –ö–æ–º–ø–æ–∑–∏—Ü–∏—è—Ç–∞ –µ –ø–æ-–≥—ä–≤–∫–∞–≤–∞ –æ—Ç –Ω–∞—Å–ª–µ–¥—è–≤–∞–Ω–µ—Ç–æ –∏ –ø–æ–∑–≤–æ–ª—è–≤–∞ –ø–æ-–¥–æ–±—ä—Ä –∫–æ–Ω—Ç—Ä–æ–ª –≤—ä—Ä—Ö—É –∫–æ–¥–∞.
‚úÖ –ò–∑–ø–æ–ª–∑–≤–∞–π –∫–æ–º–ø–æ–∑–∏—Ü–∏—è, –∫–æ–≥–∞—Ç–æ –µ–¥–∏–Ω–∏—è—Ç –æ–±–µ–∫—Ç "–∏–º–∞" –¥—Ä—É–≥ –æ–±–µ–∫—Ç, –Ω–æ –Ω–µ –µ —Å—ä—â–∏—è—Ç –∫–∞—Ç–æ –Ω–µ–≥–æ.
‚úÖ –ß—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (Dependency Injection) –∫–æ–¥—ä—Ç —Å—Ç–∞–≤–∞ –ø–æ-–ª–µ—Å–µ–Ω
 –∑–∞ –ø–æ–¥–¥—Ä—ä–∂–∫–∞, —Ä–∞–∑—à–∏—Ä–µ–Ω–∏–µ –∏ —Ç–µ—Å—Ç–≤–∞–Ω–µ. üöÄ
